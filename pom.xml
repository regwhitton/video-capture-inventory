<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.github.regwhitton</groupId>
    <artifactId>video-capture-inventory</artifactId>
    <version>0.1.1</version>
    <packaging>jar</packaging>

    <!--
        During a release build profiles will be activated from the
        command line using -P option.
    -->
    <profiles>
        <!--
            Release build profile for just the default jar containing the Java API.
        -->
        <profile>
            <id>java-only</id>
            <properties>
                <win.natives.build.skip>true</win.natives.build.skip>
                <linux.natives.build.skip>true</linux.natives.build.skip>
                <java-api.jar.phase>package</java-api.jar.phase>
                <win.natives.jar.phase>none</win.natives.jar.phase>
                <linux.natives.jar.phase>none</linux.natives.jar.phase>
            </properties>
        </profile>

        <!--
            Release build profile to exclude the default jar containing the Java API.
        -->
        <profile>
            <id>natives-only</id>
            <properties>
                <java-api.jar.phase>none</java-api.jar.phase>
            </properties>
        </profile>

        <!-- OS configs for building and jaring native shared library -->

        <profile>
            <id>windows-natives</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <!--
                    In the JVM, the java.home property points to the JRE not the JDK.
                    JAVA_HOME points to JDK on target build machine:
                        https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners#windows-server-2019
                    However, in Cygwin/MinGW environment, Maven changes JAVA_HOME
                    to Unix style but g++ doesn't understand it.
                    So we setup jdk.home to points to JDK by assuming it is folder above JRE.
                -->
                <win.jdk.home>${java.home}/..</win.jdk.home>

                <win.natives.build.skip>false</win.natives.build.skip>
                <win.natives.jar.phase>package</win.natives.jar.phase>
            </properties>
        </profile>

        <profile>
            <id>linux-natives</id>
            <activation>
                <os>
                    <family>linux</family>
                </os>
            </activation>
            <properties>
                <linux.jdk.home>${env.JAVA_HOME}</linux.jdk.home>

                <linux.natives.build.skip>false</linux.natives.build.skip>
                <linux.natives.jar.phase>package</linux.natives.jar.phase>
            </properties>
        </profile>

        <profile>
            <id>sources-javadocs</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>${build-helper.plugin.version}</version>
                        <executions>
                            <execution>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>src/main/cpp</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${sources.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${javadocs.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <properties>
        <win.natives.build.skip>true</win.natives.build.skip>
        <linux.natives.build.skip>true</linux.natives.build.skip>
        <java-api.jar.phase>package</java-api.jar.phase>
        <win.natives.jar.phase>none</win.natives.jar.phase>
        <linux.natives.jar.phase>none</linux.natives.jar.phase>

        <generated.includes>${project.build.directory}/generated-includes</generated.includes>
        <natives>${project.build.directory}/natives</natives>

        <compiler.plugin.version>3.1</compiler.plugin.version>
        <antrun.plugin.version>1.8</antrun.plugin.version>
        <jar.plugin.version>3.2.0</jar.plugin.version>
        <build-helper.plugin.version>3.0.0</build-helper.plugin.version>
        <sources.plugin.version>3.2.0</sources.plugin.version>
        <javadocs.plugin.version>3.1.1</javadocs.plugin.version>

        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <build>
        <plugins>
            <!--
                While compiling java create C++ header files
                for the native code and bundle them into the jar.
            -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${compiler.plugin.version}</version>

                <configuration>
                    <compilerArgs>
                        <arg>-Xlint</arg>
                        <arg>-h</arg>
                        <arg>${generated.includes}</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <!--
                Compile the native shared library
            -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>${antrun.plugin.version}</version>
                <executions>
                    <execution>
                        <id>windows-natives-build</id>
                        <phase>process-classes</phase>
                        <configuration>
                            <skip>${win.natives.build.skip}</skip>
                            <target>
                                <mkdir dir="${natives}/windows-x86_64" />
                                <echo message="Compiling windows-x86_64" />
                                <exec executable="g++" failonerror="true" >
                                    <arg value="-m64" />
                                    <arg value="-Wall" />
                                    <arg value="-Werror" />
                                    <arg value="-shared" />
                                    <arg value="-I${win.jdk.home}/include" />
                                    <arg value="-I${win.jdk.home}/include/win32" />
                                    <arg value="-I${generated.includes}" />
                                    <arg value="${basedir}/src/main/cpp/Win/VideoCaptureInventoryWin.cpp" />
                                    <arg value="-o${natives}/windows-x86_64/vidcapinv.dll" />
                                    <arg value="-Wl,--add-stdcall-alias" />
                                    <arg value="-lole32" />
                                    <arg value="-loleaut32" />
                                </exec>
                                <!-- Needs 32 bit ole.dll etc.
                                <mkdir dir="${natives}/windows-x86" />
                                <echo message="Compiling windows-x86" />
                                <exec executable="g++" failonerror="true" >
                                    <arg value="-m32" />
                                    <arg value="-Wall" />
                                    <arg value="-Werror" />
                                    <arg value="-shared" />
                                    <arg value="-I${win.jdk.home}/include" />
                                    <arg value="-I${win.jdk.home}/include/win32" />
                                    <arg value="-I${generated.includes}" />
                                    <arg value="${basedir}/src/main/cpp/Win/VideoCaptureInventoryWin.cpp" />
                                    <arg value="-o${natives}/windows-x86/vidcapinv.dll" />
                                    <arg value="-Wl,- -add-stdcall-alias" />
                                    <arg value="-lole32" />
                                    <arg value="-loleaut32" />
                                </exec>
                                -->
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>linux-natives-build</id>
                        <phase>process-classes</phase>
                        <configuration>
                            <skip>${linux.natives.build.skip}</skip>
                            <target>
                                <mkdir dir="${natives}/linux-x86_64" />
                                <echo message="Compiling linux-x86_64" />
                                <exec executable="g++" failonerror="true" >
                                    <arg value="-fPIC" />
                                    <arg value="-Wall" />
                                    <arg value="-Werror" />
                                    <arg value="-shared" />
                                    <arg value="-I${linux.jdk.home}/include" />
                                    <arg value="-I${linux.jdk.home}/include/linux" />
                                    <arg value="-I${generated.includes}" />
                                    <arg value="${basedir}/src/main/cpp/linux/VideoCaptureInventoryLinux.cpp" />
                                    <arg value="-o${basedir}/target/natives/linux-x86_64/libvidcapinv.so" />
                                </exec>
                                <mkdir dir="${natives}/linux-armhf" />
                                <echo message="Compiling linux-armhf" />
                                <exec executable="docker" failonerror="true" >
                                    <arg value="run" />
                                    <arg value="-v${basedir}:/workdir" />
                                    <arg value="-v${linux.jdk.home}/include:/jdk-include" />
                                    <arg value="--rm" />
                                    <arg value="-eCROSS_TRIPLE=arm-linux-gnueabihf" />
                                    <arg value="multiarch/crossbuild" />
                                    <arg value="g++" />
                                    <arg value="-fPIC" />
                                    <arg value="-Wall" />
                                    <arg value="-Werror" />
                                    <arg value="-shared" />
                                    <arg value="-I/jdk-include" />
                                    <arg value="-I/jdk-include/linux" />
                                    <arg value="-I/workdir/target/generated-includes" />
                                    <arg value="/workdir/src/main/cpp/linux/VideoCaptureInventoryLinux.cpp" />
                                    <arg value="-o/workdir/target/natives/linux-armhf/libvidcapinv.so" />
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
                Jar java-api as main artifact and each native share library with its own classifier.
            -->
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${jar.plugin.version}</version>
                <executions>
                    <execution>
                        <id>default-jar</id>
                        <!-- Setting to "none" stop production of default jar -->
                        <phase>${java-api.jar.phase}</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>windows-x86_64-jar</id>
                        <phase>${win.natives.jar.phase}</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>windows-x86_64</classifier>
                            <classesDirectory>${natives}/windows-x86_64</classesDirectory>
                        </configuration>
                    </execution>
                    <!-- Not being built - see above.
                    <execution>
                        <id>windows-x86-jar</id>
                        <phase>${win.natives.jar.phase}</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>windows-x86</classifier>
                            <classesDirectory>${natives}/windows-x86</classesDirectory>
                        </configuration>
                    </execution>
                    -->
                    <execution>
                        <id>linux-x86_64-jar</id>
                        <phase>${linux.natives.jar.phase}</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>linux-x86_64</classifier>
                            <classesDirectory>${natives}/linux-x86_64</classesDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>linux-armhf-jar</id>
                        <phase>${linux.natives.jar.phase}</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>linux-armhf</classifier>
                            <classesDirectory>${natives}/linux-armhf</classesDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <repository>
            <id>github</id>
            <name>GitHub regwhitton Apache Maven Packages</name>
            <url>https://maven.pkg.github.com/regwhitton/video-capture-inventory</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </distributionManagement>

</project>
